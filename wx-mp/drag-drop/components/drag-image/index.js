"use strict";
var app = getApp();
Component({
    properties: {},
    data: {
        images: [],
        imageWidth: 0,
        areaHeight: 0,
        coordinates: [],
        x: 0,
        y: 0,
        hidden: true,
        currentImg: "",
        currentIndex: 0,
    },
    methods: {
        computedImageWidth: function () {
            var windowWidth = app.globalData.systemInfo.windowWidth;
            var width = windowWidth - 16;
            this.setData({
                imageWidth: (width - 16) / 3,
            });
        },
        computedAreaHeight: function () {
            var _this = this;
            wx.createSelectorQuery()
                .in(this)
                .select(".image-list")
                .boundingClientRect(function (rect) {
                return _this.setData({
                    areaHeight: rect.height,
                });
            })
                .exec();
        },
        computedCoordinates: function () {
            var _this = this;
            wx.createSelectorQuery()
                .in(this)
                .selectAll(".image-item")
                .fields({
                dataset: true,
                rect: true,
            }, function (result) {
                return _this.setData({
                    coordinates: result,
                });
            })
                .exec();
        },
        addImage: function () {
            var _this = this;
            wx.chooseImage({
                count: 9 - this.data.images.length,
                sizeType: ["compressed"],
                sourceType: ["album", "camera"],
                success: function (res) {
                    var images = _this.data.images;
                    for (var i = 0; i < res.tempFilePaths.length; i++) {
                        images.push(res.tempFilePaths[i]);
                    }
                    _this.setData({
                        images: images,
                    }, function () { return _this.computedAreaHeight(); });
                },
                fail: function (err) { return console.log(err); },
            });
        },
        deleteImage: function (e) {
            var _this = this;
            var index = e.target.dataset.index;
            var images = this.data.images;
            images.splice(index, 1);
            this.setData({
                images: images,
            }, function () { return _this.computedAreaHeight(); });
        },
        previewImage: function (e) {
            var index = e.target.dataset.index;
            var images = this.data.images;
            wx.previewImage({
                current: images[index],
                urls: images,
            });
        },
        handleLongPress: function (e) {
            this.computedCoordinates();
            this.setData({
                x: e.currentTarget.offsetLeft,
                y: e.currentTarget.offsetTop,
                currentImg: e.currentTarget.dataset.url,
                currentIndex: e.currentTarget.dataset.index,
                hidden: false,
                flag: true,
            });
        },
        handleTouchMove: function (e) {
            var _this = this;
            var _a = e.touches[0], x = _a.pageX, y = _a.pageY;
            wx.createSelectorQuery()
                .in(this)
                .select(".image-list")
                .boundingClientRect(function (rect) {
                y = y - rect.top;
                _this.setData({
                    x: x,
                    y: y,
                });
            })
                .exec();
        },
        handleTouchEnd: function (e) {
            var _a;
            var _b = e.changedTouches[0], x = _b.pageX, y = _b.pageY;
            var _c = this.data, images = _c.images, coordinates = _c.coordinates;
            for (var i = 0; i < coordinates.length; i++) {
                var item = coordinates[i];
                if (x > item.left &&
                    x < item.right &&
                    y > item.top &&
                    y < item.bottom) {
                    var endIndex = item.dataset.index;
                    var beginIndex = this.data.currentIndex;
                    _a = [
                        images[endIndex],
                        images[beginIndex],
                    ], images[beginIndex] = _a[0], images[endIndex] = _a[1];
                }
            }
            this.setData({
                images: images,
                hidden: true,
                currentImg: "",
            });
        },
    },
    lifetimes: {
        attached: function () {
            this.computedImageWidth();
        },
    },
});
//# sourceMappingURL=data:application/json;base64,